generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model notes {
  id           Int      @id @default(autoincrement())
  note_title   String   @db.VarChar(255)
  note_content String?
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  authorID     String
  users        User     @relation(fields: [authorID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags         tags[]
}

model user_preferences {
  id          String  @id @default(uuid())
  color_mode  Boolean
  color_theme String  @db.VarChar(54)
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique
}

model tags {
  id        Int     @id @default(autoincrement())
  tag_name  String  @db.VarChar(255)
  tag_color Int     @db.SmallInt
  authorID  String
  notes     notes[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  notes            notes[]
  accounts         Account[]
  sessions         Session[]
  user_preferences user_preferences?
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
